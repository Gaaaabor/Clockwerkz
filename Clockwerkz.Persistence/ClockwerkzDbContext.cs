// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Clockwerkz.Domain;
using Clockwerkz.Domain.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace Clockwerkz.Persistence
{
    public partial class ClockwerkzDbContext : DbContext, IClockwerkzDbContext
    {
        public ClockwerkzDbContext()
        {
        }

        public ClockwerkzDbContext(DbContextOptions<ClockwerkzDbContext> options)
            : base(options)
        {
        }

        public virtual DbSet<BlobTrigger> BlobTriggers { get; set; }
        public virtual DbSet<Calendar> Calendars { get; set; }
        public virtual DbSet<CronTrigger> CronTriggers { get; set; }
        public virtual DbSet<FiredTrigger> FiredTriggers { get; set; }
        public virtual DbSet<JobDetail> JobDetails { get; set; }
        public virtual DbSet<Lock> Locks { get; set; }
        public virtual DbSet<PausedTriggerGrp> PausedTriggerGrps { get; set; }
        public virtual DbSet<SchedulerState> SchedulerStates { get; set; }
        public virtual DbSet<SimpleTrigger> SimpleTriggers { get; set; }
        public virtual DbSet<SimpropTrigger> SimpropTriggers { get; set; }
        public virtual DbSet<Trigger> Triggers { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<BlobTrigger>(entity =>
            {
                entity.HasKey(e => new { e.SchedName, e.TriggerName, e.TriggerGroup });
            });

            modelBuilder.Entity<Calendar>(entity =>
            {
                entity.HasKey(e => new { e.SchedName, e.CalendarName });
            });

            modelBuilder.Entity<CronTrigger>(entity =>
            {
                entity.HasKey(e => new { e.SchedName, e.TriggerName, e.TriggerGroup });

                entity.HasOne(d => d.Trigger)
                    .WithOne(p => p.CronTrigger)
                    .HasForeignKey<CronTrigger>(d => new { d.SchedName, d.TriggerName, d.TriggerGroup })
                    .HasConstraintName("FK_CRON_TRIGGERS_TRIGGERS");
            });

            modelBuilder.Entity<FiredTrigger>(entity =>
            {
                entity.HasKey(e => new { e.SchedName, e.EntryId });

                entity.HasIndex(e => new { e.SchedName, e.InstanceName })
                    .HasName("IDX_FT_TRIG_INST_NAME");

                entity.HasIndex(e => new { e.SchedName, e.JobGroup })
                    .HasName("IDX_FT_JG");

                entity.HasIndex(e => new { e.SchedName, e.TriggerGroup })
                    .HasName("IDX_FT_TG");

                entity.HasIndex(e => new { e.SchedName, e.InstanceName, e.RequestsRecovery })
                    .HasName("IDX_FT_INST_JOB_REQ_RCVRY");

                entity.HasIndex(e => new { e.SchedName, e.JobName, e.JobGroup })
                    .HasName("IDX_FT_J_G");

                entity.HasIndex(e => new { e.SchedName, e.TriggerName, e.TriggerGroup })
                    .HasName("IDX_FT_T_G");
            });

            modelBuilder.Entity<JobDetail>(entity =>
            {
                entity.HasKey(e => new { e.SchedName, e.JobName, e.JobGroup });
            });

            modelBuilder.Entity<Lock>(entity =>
            {
                entity.HasKey(e => new { e.SchedName, e.LockName });
            });

            modelBuilder.Entity<PausedTriggerGrp>(entity =>
            {
                entity.HasKey(e => new { e.SchedName, e.TriggerGroup });
            });

            modelBuilder.Entity<SchedulerState>(entity =>
            {
                entity.HasKey(e => new { e.SchedName, e.InstanceName });
            });

            modelBuilder.Entity<SimpleTrigger>(entity =>
            {
                entity.HasKey(e => new { e.SchedName, e.TriggerName, e.TriggerGroup });

                entity.HasOne(d => d.Trigger)
                    .WithOne(p => p.SimpleTrigger)
                    .HasForeignKey<SimpleTrigger>(d => new { d.SchedName, d.TriggerName, d.TriggerGroup })
                    .HasConstraintName("FK_SIMPLE_TRIGGERS_TRIGGERS");
            });

            modelBuilder.Entity<SimpropTrigger>(entity =>
            {
                entity.HasKey(e => new { e.SchedName, e.TriggerName, e.TriggerGroup });

                entity.HasOne(d => d.Trigger)
                    .WithOne(p => p.SimpropTrigger)
                    .HasForeignKey<SimpropTrigger>(d => new { d.SchedName, d.TriggerName, d.TriggerGroup })
                    .HasConstraintName("FK_SIMPROP_TRIGGERS_TRIGGERS");
            });

            modelBuilder.Entity<Trigger>(entity =>
            {
                entity.HasKey(e => new { e.SchedName, e.TriggerName, e.TriggerGroup });

                entity.HasIndex(e => new { e.SchedName, e.CalendarName })
                    .HasName("IDX_T_C");

                entity.HasIndex(e => new { e.SchedName, e.JobGroup })
                    .HasName("IDX_T_JG");

                entity.HasIndex(e => new { e.SchedName, e.NextFireTime })
                    .HasName("IDX_T_NEXT_FIRE_TIME");

                entity.HasIndex(e => new { e.SchedName, e.TriggerGroup })
                    .HasName("IDX_T_G");

                entity.HasIndex(e => new { e.SchedName, e.TriggerState })
                    .HasName("IDX_T_STATE");

                entity.HasIndex(e => new { e.SchedName, e.JobName, e.JobGroup })
                    .HasName("IDX_T_J");

                entity.HasIndex(e => new { e.SchedName, e.MisfireInstr, e.NextFireTime })
                    .HasName("IDX_T_NFT_MISFIRE");

                entity.HasIndex(e => new { e.SchedName, e.TriggerGroup, e.TriggerState })
                    .HasName("IDX_T_N_G_STATE");

                entity.HasIndex(e => new { e.SchedName, e.TriggerState, e.NextFireTime })
                    .HasName("IDX_T_NFT_ST");

                entity.HasIndex(e => new { e.SchedName, e.MisfireInstr, e.NextFireTime, e.TriggerState })
                    .HasName("IDX_T_NFT_ST_MISFIRE");

                entity.HasIndex(e => new { e.SchedName, e.TriggerName, e.TriggerGroup, e.TriggerState })
                    .HasName("IDX_T_N_STATE");

                entity.HasIndex(e => new { e.SchedName, e.MisfireInstr, e.NextFireTime, e.TriggerGroup, e.TriggerState })
                    .HasName("IDX_T_NFT_ST_MISFIRE_GRP");

                entity.HasOne(d => d.JobDetail)
                    .WithMany(p => p.Triggers)
                    .HasForeignKey(d => new { d.SchedName, d.JobName, d.JobGroup })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TRIGGERS_JOB_DETAILS");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}